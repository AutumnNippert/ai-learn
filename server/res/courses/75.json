{
    "title": "Agile Development",
    "description": "This course teaches the principles and methodologies of Agile Development along with Scrum, Kanban, Extreme Programming (XP), and Test Driven Development (TDD) practices.",
    "id": 75,
    "image": "http://localhost:3000/API/images/75",
    "progress": 0,
    "modules": [
        {
            "title": "Introduction to Agile Development: Principles and Methodologies",
            "lessons": [
                {
                    "title": "This broke.",
                    "info": "Request failed with status code it shit it's pants"
                }
            ]
        },
        {
            "title": "Agile Practices: Scrum, Kanban, Extreme Programming (XP), and Test Driven Development (TDD)",
            "lessons": [
                {
                    "title": "Scrum: Roles and ceremonies",
                    "info": "Request failed with status code 429"
                },
                {
                    "title": "Kanban: Visualizing work and workflow",
                    "info": "Lesson content on Kanban: Visualizing work and workflow:\nIn the Agile methodology, Kanban is a framework for managing and improving workflow. It emphasizes visualization, limiting work in progress, and flow management. Kanban boards can be physical or digital, and they allow teams to see the status of work at a glance. \n\nThe cards on the board represent work items, and they move from left to right as they progress through the workflow. A common workflow consists of columns such as \"To Do,\" \"In Progress,\" and \"Done.\" By visualizing the work and workflow, team members can identify bottlenecks and areas for improvement.\n\nFor example, let's consider a software development team working on a website. They could create a Kanban board with columns for \"Backlog,\" \"Design,\" \"Development,\" \"Testing,\" and \"Deployment.\" Each work item would be represented by a card that moves through the workflow. Team members can see which items are in progress, which items are done, and which items are waiting for review or testing.\n\nPractice problem: \nConsider the following Kanban board:\n\nTo Do | In Progress | Done\n-----|------------|-----\nTask A | Task B | Task C\nTask D | Task E | Task F\n\nWhat is the status of Task F?\n\nSolution: \nTask F is in the \"Done\" column.\n\nSummary: \nIn this lesson, we learned about Kanban as a framework for managing and improving workflow. Kanban involves visualizing work and workflow, limiting work in progress, and flow management. We also saw an example of a Kanban board in the context of software development."
                },
                {
                    "title": "Extreme Programming (XP): Pair programming and continuous integration",
                    "info": "Lesson Content on XP Pair Programming and Continuous Integration:\n\nIn Extreme Programming (XP), pair programming is an essential practice that involves two programmers working together at one workstation. One programmer writes the code while the other observes, reviews code, and makes suggestions. This process helps produce higher quality code by preventing errors and promotes knowledge sharing among team members. Pair programming can also increase productivity and build team morale by engaging more team members in the development process.\n\nContinuous Integration (CI) is another XP practice that involves testing code and integrating changes regularly and frequently to avoid technical debt. CI usually involves an automated process that runs every time new code is committed, ensuring that the code integrates smoothly with the rest of the project and doesn't introduce errors, conflicts, or regressions. That way, teams can detect and fix issues early, ensuring the codebase is always in a functional state.\n\nExample: \n\nLet’s examine an example of how pair programming and continuous integration work together. Suppose two programmers, Alice and Bob, work on a feature in a project. They use pair programming to develop the feature together, where one of them writes the code while the other reviews it. Once they’re satisfied with the code, they commit it to the code repository, triggering the continuous integration process. The build server then runs automated tests and checks the code for errors and conflicts. If the tests pass, the new feature is considered integrated successfully, and other team members can pull the changes to their local machines. This process ensures that the project’s codebase is continually updated, tested, and in a working state.\n\nQuiz:\n1. What is pair programming?\n2. What is continuous integration?\n3. What are the benefits of pair programming for software development?\n4. What are the benefits of continuous integration for software development?\n5. How can pair programming and continuous integration work together to improve software quality?\nAnswers:\n1. Pair programming is an XP software development practice that involves two programmers working together at one workstation: one writes the code while the other observes, reviews code, and makes suggestions.\n2. Continuous Integration (CI) is another XP practice that involves testing code and integrating changes regularly and frequently to avoid technical debt.\n3. Some benefits of pair programming for software development include: fewer errors, higher code quality, quicker feedback, knowledge sharing, and team morale.\n4. The benefits of continuous integration for software development include: faster detection and resolution of errors, fewer conflicts, less technical debt, and a more stable codebase.\n5. Pair programming and continuous integration work together to improve software quality by preventing issues early, detecting errors and conflicts quickly, and promoting knowledge sharing among team members."
                },
                {
                    "title": "Test Driven Development (TDD): Red-Green-Refactor cycle",
                    "info": "Test Driven Development (TDD): Red-Green-Refactor cycle\nIn Test Driven Development, the Red-Green-Refactor cycle is a cycle of steps that developers follow when writing tests and code. \n1. First, you write a failing test, which is shown as a red light.\n2. Next, you write code to make that test pass, which is shown as a green light.\n3. Finally, you refactor your code to clean it up and make it more efficient, while ensuring that all tests continue to pass. \n\nLet's see an example to understand this cycle better. Suppose we want to test a function that adds two numbers. \n1. We first write a test case to ensure that when we add 2 and 3 the result comes out to be 5. This test will fail because we haven't written the function yet. So, the test results in a red light. This is the first step of the cycle, which is the \"red\" stage.\n2. Now, we write code to add two numbers and make that test pass. The test now results in a green light. This is the second stage of the cycle, which is the \"green\" stage.\n3. Finally, we clean up or refactor our code to make it more efficient and readable without breaking the test. This is the third stage of the cycle, which is the \"refactor\" stage.\n\nTo summarize, in TDD, we write tests before we write any code. The Red-Green-Refactor cycle is a way of knowing that we have written the code correctly, and in a way that we can maintain over time. By following this cycle, we can continually improve the quality of our code while being confident that our tests will catch any issues before they become problems."
                },
                {
                    "title": "Choosing the Right Agile Methodology for your Team",
                    "info": "Lesson on Choosing the Right Agile Methodology for your Team:\nIn order to choose the best Agile methodology for your team, you need to consider a few factors such as the size and experience of your team, your project’s size and complexity, and the type of work you’re doing. For example, if your project requires a lot of collaboration, you may want to consider Scrum. If you’re more focused on visualizing progress, Kanban may be up your alley. It is important to keep in mind that there is no one-size-fits-all approach to Agile methodology.\nA few steps you can take when choosing an appropriate methodology:\n- Evaluate your team’s strengths and weaknesses\n- Determine your project’s needs and goals\n- Research different Agile methodologies and their respective principles\n- Experiment with different methodologies to find what works best for your team and project\n\nQuiz:\n1. What are some factors to consider when choosing an Agile methodology?\n2. Is there a one-size-fits-all approach to Agile methodology? \n3. What are some steps you can take when choosing an appropriate methodology?\nAnswers:\n1. Some factors to consider when choosing an Agile methodology include the team’s size and experience, the project’s size and complexity, and the type of work involved.\n2. There is no one-size-fits-all approach to Agile methodology.\n3. Steps to take when choosing an appropriate methodology include evaluating your team’s strengths and weaknesses, determining your project’s needs and goals, researching different Agile methodologies and their respective principles, and experimenting with different methodologies to find what works best for your team and project."
                }
            ]
        }
    ]
}